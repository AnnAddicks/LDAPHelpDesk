// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.addicks.helpdesk.domain;

import com.addicks.helpdesk.domain.AppUser;
import com.addicks.helpdesk.domain.AppUserDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AppUserDataOnDemand_Roo_DataOnDemand {

    declare @type: AppUserDataOnDemand: @Component;

    private Random AppUserDataOnDemand.rnd = new SecureRandom();

    private List<AppUser> AppUserDataOnDemand.data;

    public AppUser AppUserDataOnDemand.getNewTransientAppUser(int index) {
        AppUser obj = new AppUser();
        setLastResetPassword(obj, index);
        return obj;
    }

    public void AppUserDataOnDemand.setLastResetPassword(AppUser obj, int index) {
        Calendar lastResetPassword = Calendar.getInstance();
        obj.setLastResetPassword(lastResetPassword);
    }

    public AppUser AppUserDataOnDemand.getSpecificAppUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AppUser obj = data.get(index);
        Long id = obj.getId();
        return AppUser.findAppUser(id);
    }

    public AppUser AppUserDataOnDemand.getRandomAppUser() {
        init();
        AppUser obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return AppUser.findAppUser(id);
    }

    public boolean AppUserDataOnDemand.modifyAppUser(AppUser obj) {
        return false;
    }

    public void AppUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AppUser.findAppUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AppUser' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }

        data = new ArrayList<AppUser>();
        for (int i = 0; i < 10; i++) {
            AppUser obj = getNewTransientAppUser(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }

}
